(defconstant *board-size* 8)
(defconstant *white* 1)
(defconstant *black* -1)
(defconstant *empty* 0)
(defconstant *not-game-end* -999)

(defconstant *dir-up*		0)
(defconstant *dir-down*		1)
(defconstant *dir-right*	2)
(defconstant *dir-left*		3)
(defconstant *dir-right-up*	4)
(defconstant *dir-right-down* 	5)
(defconstant *dir-left-up* 	6)
(defconstant *dir-left-down* 	7)

(defun is-empty (piece)
  (if (or (eq piece *white*) (eq piece *black*)) nil t))
(defun is-reverse (turn target)
  (and (not (null turn)) (not (null target))
       (eq turn (reverse-turn target))))
(defun reverse-turn (turn)
  (* turn -1))

; (1111) -> (up down right left)
(defparameter *bit-dir-hash* (make-hash-table))
(setf (gethash *dir-up*		*bit-dir-hash*) #b1000)
(setf (gethash *dir-down*	*bit-dir-hash*) #b0100)
(setf (gethash *dir-right*	*bit-dir-hash*) #b0010)
(setf (gethash *dir-left*	*bit-dir-hash*)	#b0001)
(setf (gethash *dir-right-up*	*bit-dir-hash*) #b1010)
(setf (gethash *dir-right-down*	*bit-dir-hash*)	#b0110)
(setf (gethash *dir-left-up*	*bit-dir-hash*)	#b1001)
(setf (gethash *dir-left-down*	*bit-dir-hash*)	#b0101)

(defun is-target-dir (dir target)
  (neq 0 (logand
	  (gethash dir *bit-dir-hash*)
	  (gethash target *bit-dir-hash*))))

(defun is-up-dir (dir)
  (is-target-dir dir *dir-up*))
(defun is-down-dir (dir)
  (is-target-dir dir *dir-down*))
(defun is-right-dir (dir)
  (is-target-dir dir *dir-right*))
(defun is-left-dir (dir)
  (is-target-dir dir *dir-left*))
